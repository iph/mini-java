
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 09 17:44:36 EST 2012
//----------------------------------------------------

package tools;

import java_cup.runtime.Symbol;
import syntaxtree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 09 17:44:36 EST 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\004\000\002\006" +
    "\023\000\002\024\004\000\002\024\002\000\002\023\010" +
    "\000\002\023\012\000\002\023\004\000\002\005\004\000" +
    "\002\005\002\000\002\005\004\000\002\004\005\000\002" +
    "\022\004\000\002\022\002\000\002\021\015\000\002\021" +
    "\004\000\002\017\005\000\002\017\004\000\002\015\005" +
    "\000\002\015\002\000\002\016\004\000\002\016\002\000" +
    "\002\020\005\000\002\003\005\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\014\003\000\002\013" +
    "\004\000\002\013\002\000\002\012\005\000\002\012\011" +
    "\000\002\012\007\000\002\012\013\000\002\012\006\000" +
    "\002\012\011\000\002\012\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\006\000\002\007\005\000\002\007\010" +
    "\000\002\007\003\000\002\007\004\000\002\007\004\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\007\000\002\007\006\000\002\007" +
    "\004\000\002\007\005\000\002\010\004\000\002\010\002" +
    "\000\002\011\005\000\002\011\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\033\004\001\002\000\004\004\223\001" +
    "\002\000\004\002\222\001\002\000\010\002\ufffd\003\010" +
    "\033\012\001\002\000\004\002\000\001\002\000\004\044" +
    "\221\001\002\000\010\002\ufffd\003\010\033\012\001\002" +
    "\000\004\004\013\001\002\000\006\025\015\041\014\001" +
    "\002\000\016\003\021\004\ufff8\005\ufff8\006\ufff8\021\ufff8" +
    "\044\ufff8\001\002\000\004\004\016\001\002\000\004\041" +
    "\017\001\002\000\016\003\021\004\ufff8\005\ufff8\006\ufff8" +
    "\021\ufff8\044\ufff8\001\002\000\016\003\ufff4\004\025\005" +
    "\030\006\027\021\ufff4\044\ufff4\001\002\000\004\047\022" +
    "\001\002\000\030\003\ufff7\004\ufff7\005\ufff7\006\ufff7\021" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\034\ufff7\041\ufff7\044\ufff7" +
    "\001\002\000\010\003\036\021\040\044\037\001\002\000" +
    "\004\004\033\001\002\000\004\004\uffe7\001\002\000\030" +
    "\003\ufff9\004\ufff9\005\ufff9\006\ufff9\021\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\034\ufff9\041\ufff9\044\ufff9\001\002\000\004" +
    "\004\uffe9\001\002\000\006\004\uffe8\042\031\001\002\000" +
    "\004\045\032\001\002\000\004\004\uffea\001\002\000\004" +
    "\047\034\001\002\000\030\003\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\021\ufff6\026\ufff6\027\ufff6\030\ufff6\034\ufff6\041\ufff6" +
    "\044\ufff6\001\002\000\010\003\ufff5\021\ufff5\044\ufff5\001" +
    "\002\000\004\044\214\001\002\000\010\002\ufffb\003\ufffb" +
    "\033\ufffb\001\002\000\010\004\025\005\030\006\027\001" +
    "\002\000\004\004\042\001\002\000\006\003\043\043\044" +
    "\001\002\000\004\046\213\001\002\000\012\004\025\005" +
    "\030\006\027\046\uffee\001\002\000\004\041\046\001\002" +
    "\000\024\003\021\004\ufff8\005\ufff8\006\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\034\ufff8\041\ufff8\001\002\000\024\003\060" +
    "\004\053\005\030\006\027\026\056\027\051\030\050\034" +
    "\uffe4\041\052\001\002\000\004\051\172\001\002\000\004" +
    "\043\166\001\002\000\020\003\060\004\063\026\056\027" +
    "\051\030\050\041\052\044\uffe4\001\002\000\010\004\uffe7" +
    "\042\064\052\065\001\002\000\004\034\160\001\002\000" +
    "\006\034\uffe6\044\uffe6\001\002\000\004\043\152\001\002" +
    "\000\022\003\060\004\063\026\056\027\051\030\050\034" +
    "\uffe4\041\052\044\uffe4\001\002\000\004\047\061\001\002" +
    "\000\024\003\uffdd\004\uffdd\026\uffdd\027\uffdd\030\uffdd\034" +
    "\uffdd\036\uffdd\041\uffdd\044\uffdd\001\002\000\006\034\uffe5" +
    "\044\uffe5\001\002\000\006\042\064\052\065\001\002\000" +
    "\026\004\067\010\072\011\074\013\073\014\066\017\100" +
    "\020\076\035\070\040\075\043\077\001\002\000\026\004" +
    "\067\010\072\011\074\013\073\014\066\017\100\020\076" +
    "\035\070\040\075\043\077\001\002\000\004\017\144\001" +
    "\002\000\030\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\042\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\001" +
    "\002\000\006\004\135\005\136\001\002\000\022\012\104" +
    "\013\105\014\106\015\111\016\107\042\102\047\134\051" +
    "\110\001\002\000\030\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\042\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\001\002\000\004\017\133\001\002\000\030\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\042\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000\030\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\042\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\001\002\000\026\004\067" +
    "\010\072\011\074\013\073\014\066\017\100\020\076\035" +
    "\070\040\075\043\077\001\002\000\026\004\067\010\072" +
    "\011\074\013\073\014\066\017\100\020\076\035\070\040" +
    "\075\043\077\001\002\000\030\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\042\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\001\002\000\022\012\104\013\105\014\106" +
    "\015\111\016\107\042\102\046\103\051\110\001\002\000" +
    "\026\004\067\010\072\011\074\013\073\014\066\017\100" +
    "\020\076\035\070\040\075\043\077\001\002\000\030\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\042\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\001\002\000\026\004" +
    "\067\010\072\011\074\013\073\014\066\017\100\020\076" +
    "\035\070\040\075\043\077\001\002\000\026\004\067\010" +
    "\072\011\074\013\073\014\066\017\100\020\076\035\070" +
    "\040\075\043\077\001\002\000\026\004\067\010\072\011" +
    "\074\013\073\014\066\017\100\020\076\035\070\040\075" +
    "\043\077\001\002\000\026\004\067\010\072\011\074\013" +
    "\073\014\066\017\100\020\076\035\070\040\075\043\077" +
    "\001\002\000\006\004\114\037\113\001\002\000\026\004" +
    "\067\010\072\011\074\013\073\014\066\017\100\020\076" +
    "\035\070\040\075\043\077\001\002\000\030\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\107\042\102\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\001\002\000\030\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\042\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\001\002\000\004\043\115\001" +
    "\002\000\030\004\067\010\072\011\074\013\073\014\066" +
    "\017\100\020\076\035\070\040\075\043\077\046\uffc8\001" +
    "\002\000\024\012\104\013\105\014\106\015\111\016\107" +
    "\042\102\046\uffc6\050\uffc6\051\110\001\002\000\004\046" +
    "\120\001\002\000\030\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\042\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\001\002\000\006\046\uffc9\050\122\001\002\000\026" +
    "\004\067\010\072\011\074\013\073\014\066\017\100\020" +
    "\076\035\070\040\075\043\077\001\002\000\024\012\104" +
    "\013\105\014\106\015\111\016\107\042\102\046\uffc7\050" +
    "\uffc7\051\110\001\002\000\030\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\042\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\001\002\000\030\012\uffd9\013\uffd9\014\uffd9" +
    "\015\111\016\107\042\102\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\001\002\000\030\012\uffda\013\uffda\014\uffda" +
    "\015\111\016\107\042\102\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\001\002\000\030\012\uffdb\013\105\014\106" +
    "\015\111\016\107\042\102\045\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\001\002\000\022\012\104\013\105\014\106" +
    "\015\111\016\107\042\102\045\131\051\110\001\002\000" +
    "\030\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\042\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002\000" +
    "\030\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\042\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000" +
    "\030\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\042\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002\000" +
    "\024\003\uffdf\004\uffdf\026\uffdf\027\uffdf\030\uffdf\034\uffdf" +
    "\036\uffdf\041\uffdf\044\uffdf\001\002\000\004\043\142\001" +
    "\002\000\004\042\137\001\002\000\026\004\067\010\072" +
    "\011\074\013\073\014\066\017\100\020\076\035\070\040" +
    "\075\043\077\001\002\000\022\012\104\013\105\014\106" +
    "\015\111\016\107\042\102\045\141\051\110\001\002\000" +
    "\030\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\042\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000" +
    "\004\046\143\001\002\000\030\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\042\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\001\002\000\030\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\042\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\001\002\000\022\012\104\013\105\014\106" +
    "\015\111\016\107\042\102\045\146\051\110\001\002\000" +
    "\004\052\147\001\002\000\026\004\067\010\072\011\074" +
    "\013\073\014\066\017\100\020\076\035\070\040\075\043" +
    "\077\001\002\000\022\012\104\013\105\014\106\015\111" +
    "\016\107\042\102\047\151\051\110\001\002\000\024\003" +
    "\uffde\004\uffde\026\uffde\027\uffde\030\uffde\034\uffde\036\uffde" +
    "\041\uffde\044\uffde\001\002\000\026\004\067\010\072\011" +
    "\074\013\073\014\066\017\100\020\076\035\070\040\075" +
    "\043\077\001\002\000\022\012\104\013\105\014\106\015" +
    "\111\016\107\042\102\046\154\051\110\001\002\000\016" +
    "\003\060\004\063\026\056\027\051\030\050\041\052\001" +
    "\002\000\004\036\156\001\002\000\016\003\060\004\063" +
    "\026\056\027\051\030\050\041\052\001\002\000\024\003" +
    "\uffe2\004\uffe2\026\uffe2\027\uffe2\030\uffe2\034\uffe2\036\uffe2" +
    "\041\uffe2\044\uffe2\001\002\000\026\004\067\010\072\011" +
    "\074\013\073\014\066\017\100\020\076\035\070\040\075" +
    "\043\077\001\002\000\022\012\104\013\105\014\106\015" +
    "\111\016\107\042\102\047\162\051\110\001\002\000\004" +
    "\044\163\001\002\000\010\003\ufff3\021\ufff3\044\ufff3\001" +
    "\002\000\004\044\165\001\002\000\024\003\uffe3\004\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\034\uffe3\036\uffe3\041\uffe3\044" +
    "\uffe3\001\002\000\026\004\067\010\072\011\074\013\073" +
    "\014\066\017\100\020\076\035\070\040\075\043\077\001" +
    "\002\000\022\012\104\013\105\014\106\015\111\016\107" +
    "\042\102\046\170\051\110\001\002\000\016\003\060\004" +
    "\063\026\056\027\051\030\050\041\052\001\002\000\024" +
    "\003\uffe1\004\uffe1\026\uffe1\027\uffe1\030\uffe1\034\uffe1\036" +
    "\uffe1\041\uffe1\044\uffe1\001\002\000\004\031\173\001\002" +
    "\000\004\051\174\001\002\000\004\032\175\001\002\000" +
    "\004\043\176\001\002\000\026\004\067\010\072\011\074" +
    "\013\073\014\066\017\100\020\076\035\070\040\075\043" +
    "\077\001\002\000\022\012\104\013\105\014\106\015\111" +
    "\016\107\042\102\046\200\051\110\001\002\000\004\047" +
    "\201\001\002\000\024\003\uffe0\004\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\034\uffe0\036\uffe0\041\uffe0\044\uffe0\001\002\000" +
    "\004\046\212\001\002\000\004\004\204\001\002\000\006" +
    "\046\uffec\050\uffec\001\002\000\006\046\uffef\050\206\001" +
    "\002\000\010\004\025\005\030\006\027\001\002\000\006" +
    "\046\uffed\050\uffed\001\002\000\004\004\211\001\002\000" +
    "\006\046\uffeb\050\uffeb\001\002\000\004\041\ufff1\001\002" +
    "\000\004\041\ufff0\001\002\000\010\003\ufff2\021\ufff2\044" +
    "\ufff2\001\002\000\016\003\ufff4\004\025\005\030\006\027" +
    "\021\ufff4\044\ufff4\001\002\000\010\003\036\021\040\044" +
    "\217\001\002\000\010\002\ufffc\003\ufffc\033\ufffc\001\002" +
    "\000\004\002\ufffe\001\002\000\010\002\ufffa\003\ufffa\033" +
    "\ufffa\001\002\000\004\002\001\001\002\000\004\041\224" +
    "\001\002\000\004\021\225\001\002\000\004\022\226\001" +
    "\002\000\004\023\227\001\002\000\004\024\230\001\002" +
    "\000\004\043\231\001\002\000\004\007\232\001\002\000" +
    "\004\042\233\001\002\000\004\045\234\001\002\000\004" +
    "\004\235\001\002\000\004\046\236\001\002\000\004\041" +
    "\237\001\002\000\016\003\060\004\063\026\056\027\051" +
    "\030\050\041\052\001\002\000\004\044\241\001\002\000" +
    "\004\044\242\001\002\000\010\002\uffff\003\uffff\033\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\002\004\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\010\024\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\010\024" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\017\001\001\000\010\003\023\004\025\022\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\040\001\001\000\002\001\001\000\004\017\044" +
    "\001\001\000\002\001\001\000\006\003\202\015\201\001" +
    "\001\000\002\001\001\000\004\005\046\001\001\000\014" +
    "\003\023\004\025\012\056\013\054\014\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\056\013\054" +
    "\014\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\056\013\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\144\001\001\000\004" +
    "\007\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\131\001\001\000\004\007\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\127\001\001\000\002\001" +
    "\001\000\004\007\126\001\001\000\004\007\125\001\001" +
    "\000\004\007\124\001\001\000\004\007\123\001\001\000" +
    "\002\001\001\000\004\007\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\115\010" +
    "\116\001\001\000\004\011\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\152\001\001\000" +
    "\002\001\001\000\004\012\154\001\001\000\002\001\001" +
    "\000\004\012\156\001\001\000\002\001\001\000\004\007" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\166\001\001\000\002\001\001\000\004\012\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\204\001\001" +
    "\000\004\020\206\001\001\000\004\003\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\023\004\025\022\215\001\001\000\004\021\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol tok = lexer.next_token(); return tok; 
    }


  JavaLex lexer;
  public Program p;
  public Parser(JavaLex lex) {
      super(lex);
      lexer = lex;

  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_rest ::= 
            {
              ExpList RESULT =null;
		RESULT = new ExpList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_rest",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_rest ::= exp_rest COMMA exp 
            {
              ExpList RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eList.addElement(e); RESULT = eList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_rest",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_list ::= 
            {
              ExpList RESULT =null;
		RESULT = new ExpList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_list ::= exp exp_rest 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ExpList temp = new ExpList();
                temp.addElement(e);
                for(int i = 0; i < eList.size(); i++){
                    temp.addElement(eList.elementAt(i));
                }
                RESULT = temp;
                
                
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= NOT exp 
            {
              Exp RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Not(ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= NEW IDENT LPAREN RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new NewObject(new Identifier(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= NEW INT LSQBRACKET exp RSQBRACKET 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NewArray(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= THIS 
            {
              Exp RESULT =null;
		RESULT = new This();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= IDENT 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IdentifierExp(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= FALSE 
            {
              Exp RESULT =null;
		RESULT = new False();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= TRUE 
            {
              Exp RESULT =null;
		RESULT = new True();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= MINUS INT_LIT 
            {
              Exp RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer ai = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IntegerLiteral(-ai);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= PLUS INT_LIT 
            {
              Exp RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer ai = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IntegerLiteral(ai);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= INT_LIT 
            {
              Exp RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer ai = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IntegerLiteral(ai);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp PERIOD IDENT LPAREN exp_list RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList eList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Call(e, new Identifier(id), eList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp PERIOD LENGTH 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ArrayLength(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp LSQBRACKET exp RSQBRACKET 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ArrayLookup(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp TIMES exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Times(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Minus(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Plus(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new And(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp LESS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LessThan(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= error SEMICOLON 
            {
              Statement RESULT =null;
		System.out.println("ERROR!");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= IDENT LSQBRACKET exp RSQBRACKET EQUAL exp SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ArrayAssign(new Identifier(id), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= IDENT EQUAL exp SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Assign(new Identifier(id), e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Print(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new While(e, s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(e, s, s2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= LBRACE full_states RBRACE 
            {
              Statement RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList sList = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Block(sList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements ::= 
            {
              StatementList RESULT =null;
		RESULT = new StatementList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements ::= statement statements 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList sList = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  sList.addElement(s); RESULT = sList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // full_states ::= statements 
            {
              StatementList RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList sList = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 StatementList atBegin = new StatementList();
                for(int i = sList.size()-1; i >= 0; i--){
                    atBegin.addElement(sList.elementAt(i));
                }
                RESULT = atBegin;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("full_states",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= IDENT 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IdentifierType(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = new IntegerType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		RESULT = new BooleanType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= INT LSQBRACKET RSQBRACKET 
            {
              Type RESULT =null;
		RESULT = new IntArrayType();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_rest ::= COMMA type IDENT 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Formal(t, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rest",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formal_rests ::= 
            {
              FormalList RESULT =null;
		RESULT = new FormalList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rests",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formal_rests ::= formal_rests formal_rest 
            {
              FormalList RESULT =null;
		int fListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FormalList fList = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                fList.addElement(f); RESULT = fList;
            
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_rests",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal_list ::= 
            {
              FormalList RESULT =null;
		RESULT = new FormalList();System.out.println("HIT A RIGHT PAREN?");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal_list ::= type IDENT formal_rests 
            {
              FormalList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FormalList fList = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                FormalList temp = new FormalList();
                Formal f = new Formal(t,new Identifier(id)); 
                temp.addElement(f);
                for(int i = 0; i < fList.size(); i++){
                    temp.addElement(fList.elementAt(i));
                }
                RESULT = temp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_total ::= error RPAREN 
            {
              FormalList RESULT =null;
		System.out.println("GAAHGAKLGDH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_total",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_total ::= LPAREN formal_list RPAREN 
            {
              FormalList RESULT =null;
		int fListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FormalList fList = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_total",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl ::= error RBRACE 
            {
              MethodDecl RESULT =null;
		System.out.println(" YAR ERROR MATEY");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= PUBLIC type IDENT formal_total LBRACE var_decls full_states RETURN exp SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int fListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		FormalList fList = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList vList = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList sList = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodDecl(t, new Identifier(id), fList, vList, sList, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decls ::= 
            {
              MethodDeclList RESULT =null;
		RESULT = new MethodDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decls ::= method_decls method_decl 
            {
              MethodDeclList RESULT =null;
		int mListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mList = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		mList.addElement(m); RESULT = mList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= type IDENT SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDecl(t, new Identifier(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decls ::= error SEMICOLON 
            {
              VarDeclList RESULT =null;
		System.out.println("VARDECLZZzZZZ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decls",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decls ::= 
            {
              VarDeclList RESULT =null;
		RESULT = new VarDeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decls",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decls ::= var_decls var_decl 
            {
              VarDeclList RESULT =null;
		int curlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int curlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclList curlist = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl item = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		curlist.addElement(item); RESULT = curlist;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decls",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl ::= error RBRACE 
            {
              ClassDecl RESULT =null;
		 System.out.println("Im a robot error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_decl ::= CLASS IDENT EXTENDS IDENT LBRACE var_decls method_decls RBRACE 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vList = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mList = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ClassDeclExtends(new Identifier(id), new Identifier(id2), vList, mList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_decl ::= CLASS IDENT LBRACE var_decls method_decls RBRACE 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vList = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mList = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ClassDeclSimple(new Identifier(id), vList, mList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decls ::= 
            {
              ClassDeclList RESULT =null;
		RESULT = new ClassDeclList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_decls ::= class_decl class_decls 
            {
              ClassDeclList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDecl c = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList cList = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cList.addElement(c); RESULT= cList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_decls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_class ::= CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LSQBRACKET RSQBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement as = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MainClass(new Identifier(id1), new Identifier(id2), as);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_class",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // java_program ::= main_class class_decls 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList cList = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Program(m, cList); this.parser.p = RESULT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= java_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

