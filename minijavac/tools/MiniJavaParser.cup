/**
 * Parser for MiniJava specification
 */
package minijavac.tools;
import java.util.*;
import java_cup.runtime.Symbol;
import minijavac.syntaxtree.*;
import minijavac.visitor.*;

scan with 
{: 
    return lexer.next_token(); 
:};

parser code
{: 
    MiniJavaLexer lexer;
    public HashMap<Object, MJToken> location;
    public MiniJavaParser(MiniJavaLexer lex) { 
        super(lex); 
        location = new HashMap<Object, MJToken>();
        lexer = lex;
    }

    public void report_error(String message, Object info) {
        if (info == null || info instanceof Symbol)
            return;

        MJToken token = (MJToken)info;
        System.out.printf(message + " at line %d, column %d\n", token.line, token.column);
    }
:};

terminal MJToken DOT, COMMA, SEMI;
terminal MJToken ASSIGN, NOT, AND, LESSTHAN, PLUS, MINUS, TIMES;
terminal MJToken LPAREN, RPAREN;
terminal MJToken LCURLY, RCURLY;
terminal MJToken LBRACKET, RBRACKET;
terminal MJToken CLASS, PUBLIC, STATIC, VOID, MAIN, EXTENDS;
terminal MJToken STRING;
terminal MJToken RETURN;
terminal MJToken IF, ELSE, WHILE;
terminal MJToken PRINTLN;
terminal MJToken LENGTH;
terminal MJToken THIS;
terminal MJToken NEW;
terminal MJToken BOOLEANTYPE, INTTYPE;
terminal MJToken BOOLEAN;
terminal MJToken INTEGER;
terminal MJToken IDENTIFIER;

non terminal Program program;
non terminal MainClass main_class;
non terminal ClassDeclList class_decl_list;
non terminal ClassDecl class_decl;
non terminal StatementList statement_list;
non terminal VarDeclList var_decl_list;
non terminal MethodDeclList method_decl_list;
non terminal VarDecl var_decl;
non terminal MethodDecl method_decl;
non terminal FormalList formal_header;
non terminal FormalList formal_list;
non terminal Formal formal_rest;
non terminal FormalList formal_rest_list;
non terminal Type type;
non terminal Statement statement;
non terminal Exp expression;
non terminal ExpList expression_list;
non terminal Exp expression_rest;
non terminal ExpList expression_rest_list;
non terminal Identifier identifier;
non terminal Integer integer;

precedence right ASSIGN;
precedence left AND;
precedence left LESSTHAN;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right NOT;
precedence left DOT, LBRACKET, RBRACKET;

start with program;

program              ::= main_class:mainClass class_decl_list:classes
                         {: 
                            RESULT = new Program(mainClass, classes); 
                         :}
                       ;

main_class           ::= CLASS:c identifier:name
                         LCURLY PUBLIC STATIC VOID MAIN 
                         LPAREN STRING LBRACKET RBRACKET identifier:arg RPAREN
                         LCURLY statement:stmt RCURLY
                         RCURLY
                         {: 
                            RESULT = new MainClass(name, arg, stmt); 
                            parser.location.put(RESULT, c);
                         :}
                       ;

class_decl_list      ::= class_decl_list:classes class_decl:classDecl
                         {: 
                            classes.addElement(classDecl);
                            RESULT = classes;
                         :}
                       | /* epsilon */
                         {:
                            RESULT = new ClassDeclList();
                         :}
                       ;

class_decl           ::= CLASS:c identifier:name EXTENDS identifier:parentName
                         LCURLY var_decl_list:vars method_decl_list:methods RCURLY
                         {:
                            RESULT = new ClassDeclExtends(name, parentName, vars, methods); 
                            parser.location.put(RESULT, c);
                         :}
                       | CLASS:c identifier:name
                         LCURLY var_decl_list:vars method_decl_list:methods RCURLY
                         {:
                            RESULT = new ClassDeclSimple(name, vars, methods); 
                            parser.location.put(RESULT, c);
                         :}
                       | error RCURLY:e
                         {:
                            parser.report_error("Parse error", e);
                         :}
                       ;

statement_list       ::= statement:stmt statement_list:statements
                         {:
                            RESULT = new StatementList();
                            RESULT.addElement(stmt);
                            for (int i = 0; i < statements.size(); i++) {
                                RESULT.addElement(statements.elementAt(i));
                            }
                         :}
                       | /* epsilon */
                         {:
                            RESULT = new StatementList();
                         :}
                       ;

var_decl_list        ::= var_decl_list:vars var_decl:varDecl
                         {:
                            vars.addElement(varDecl);
                            RESULT = vars;
                         :}
                       | /* epsilon */
                         {:
                            RESULT = new VarDeclList();
                         :}
                       ;

method_decl_list     ::= method_decl_list:methods method_decl:methodDecl
                         {:
                            methods.addElement(methodDecl);
                            RESULT = methods;
                         :}
                       | /* epsilon */
                         {:
                            RESULT = new MethodDeclList();
                         :}
                       ;

var_decl             ::= type:t identifier:name SEMI:s
                         {:
                            RESULT = new VarDecl(t, name);
                            parser.location.put(RESULT, s); 
                         :}
                       | type error SEMI:e
                         {:
                            parser.report_error("Parse error", e);
                         :}
                       ;

method_decl          ::= PUBLIC:p type:returnType identifier:name formal_header:formals 
                         LCURLY var_decl_list:vars statement_list:statements RETURN expression:exp SEMI RCURLY
                         {:
                            RESULT = new MethodDecl(returnType, name, formals, vars, statements, exp);
                            parser.location.put(RESULT, p);
                         :}
                       | error RCURLY:e
                         {:
                            parser.report_error("Parse error", e);
                         :}
                       ;

formal_header        ::= LPAREN formal_list:formals RPAREN
                         {:
                            RESULT = formals;
                         :}
                       | error RPAREN:e
                         {:
                            parser.report_error("Parse error", e);
                         :}
                       ;

formal_list          ::= type:t identifier:name formal_rest_list:formals
                         {:
                            RESULT = new FormalList();
                            RESULT.addElement(new Formal(t, name));
                            for (int i = 0; i < formals.size(); i++) {
                                RESULT.addElement(formals.elementAt(i));
                            }
                         :}
                       | /* epsilon */
                         {:
                            RESULT = new FormalList();
                         :}
                       ;

formal_rest          ::= COMMA:c type:t identifier:name
                         {:
                            RESULT = new Formal(t, name);
                            parser.location.put(RESULT, c);
                         :}
                       ;

formal_rest_list     ::= formal_rest_list:formals formal_rest:formal
                         {:
                            formals.addElement(formal);
                            RESULT = formals;
                         :}
                       | /* epsilon */
                         {:
                            RESULT = new FormalList();
                         :}
                       ;

type                 ::= INTTYPE:i LBRACKET RBRACKET
                         {:
                            RESULT = new IntArrayType();
                            parser.location.put(RESULT, i);
                         :}
                       | INTTYPE:i
                         {:
                            RESULT = new IntegerType();
                            parser.location.put(RESULT, i);
                         :}
                       | BOOLEANTYPE:b
                         {:
                            RESULT = new BooleanType();
                            parser.location.put(RESULT, b);
                         :}
                       | IDENTIFIER:userClass
                         {:
                            RESULT = new IdentifierType((String)(userClass.value));
                            parser.location.put(RESULT, userClass);
                         :}
                       ;

statement            ::= LCURLY:l statement_list:statements RCURLY
                         {:
                            RESULT = new Block(statements);
                            parser.location.put(RESULT, l);
                         :}
                       | IF:i LPAREN expression:exp RPAREN statement:ifStmt ELSE statement:elseStmt
                         {:
                            RESULT = new If(exp, ifStmt, elseStmt);
                            parser.location.put(RESULT, i);
                         :}
                       | WHILE:w LPAREN expression:exp RPAREN statement:stmt
                         {:
                            RESULT = new While(exp, stmt);
                            parser.location.put(RESULT, w);
                         :}
                       | PRINTLN:p LPAREN expression:exp RPAREN SEMI
                         {:
                            RESULT = new Print(exp);
                            parser.location.put(RESULT, p);
                         :}
                       | identifier:var ASSIGN:a expression:exp SEMI
                         {:
                            RESULT = new Assign(var, exp);
                            parser.location.put(RESULT, a);
                         :}
                       | identifier:var LBRACKET expression:index RBRACKET ASSIGN:a expression:exp SEMI
                         {:
                            RESULT = new ArrayAssign(var, index, exp);
                            parser.location.put(RESULT, a);
                         :}
                       | error SEMI:e
                         {:
                            parser.report_error("Parse error", e);
                         :}
                       ;

expression           ::= expression:exp1 AND:a expression:exp2
                         {:
                            RESULT = new And(exp1, exp2);
                            parser.location.put(RESULT, a);
                         :}
                       | expression:exp1 LESSTHAN:lt expression:exp2
                         {:
                            RESULT = new LessThan(exp1, exp2);
                            parser.location.put(RESULT, lt);
                         :}
                       | expression:exp1 PLUS:p expression:exp2
                         {:
                            RESULT = new Plus(exp1, exp2);
                            parser.location.put(RESULT, p);
                         :}
                       | expression:exp1 MINUS:m expression:exp2
                         {:
                            RESULT = new Minus(exp1, exp2);
                            parser.location.put(RESULT, m);
                         :}
                       | expression:exp1 TIMES:t expression:exp2
                         {:
                            RESULT = new Times(exp1, exp2);
                            parser.location.put(RESULT, t);
                         :}
                       | expression:exp LBRACKET:l expression:index RBRACKET
                         {:
                            RESULT = new ArrayLookup(exp, index);
                            parser.location.put(RESULT, l);
                         :}
                       | expression:exp DOT:d LENGTH
                         {:
                            RESULT = new ArrayLength(exp);
                            parser.location.put(RESULT, d);
                         :}
                       | expression:exp DOT:d identifier:method LPAREN expression_list:exprs RPAREN
                         {:
                            RESULT = new Call(exp, method, exprs);
                            parser.location.put(RESULT, d);
                         :}
                       | expression:exp DOT identifier:method error RPAREN:e
                         {:
                            parser.report_error("Parse error", e);
                         :}
                       | integer:i
                         {:
                            RESULT = new IntegerLiteral(i.intValue());
                         :}
                       | BOOLEAN:b
                         {:
                            RESULT = new False();
                            if (((Boolean)b.value).booleanValue()) RESULT = new True();
                            parser.location.put(RESULT, b);
                         :}
                       | IDENTIFIER:var
                         {:
                            RESULT = new IdentifierExp((String)(var.value));
                            parser.location.put(RESULT, var);
                         :}
                       | THIS:t
                         {:
                            RESULT = new This();
                            parser.location.put(RESULT, t);
                         :}
                       | NEW:n INTTYPE LBRACKET expression:exp RBRACKET
                         {:
                            RESULT = new NewArray(exp);
                            parser.location.put(RESULT, n);
                         :}
                       | NEW:n identifier:userClass LPAREN RPAREN
                         {:
                            RESULT = new NewObject(userClass);
                            parser.location.put(RESULT, n);
                         :}
                       | NOT:n expression:exp
                         {:
                            RESULT = new Not(exp);
                            parser.location.put(RESULT, n);
                         :}
                       | LPAREN:l expression:exp RPAREN
                         {:
                            RESULT = exp;
                         :}
                       ;

expression_list      ::= expression:exp expression_rest_list:exprs
                         {:
                            RESULT = new ExpList();
                            RESULT.addElement(exp);
                            for (int i = 0; i < exprs.size(); i++) {
                                RESULT.addElement(exprs.elementAt(i));
                            }
                         :}
                       | /* epsilon */
                         {:
                            RESULT = new ExpList();
                         :}
                       ;

expression_rest      ::= COMMA expression:exp
                         {:
                            RESULT = exp;
                         :}
                       ;

expression_rest_list ::= expression_rest_list:exprs expression_rest:exp
                         {:
                            exprs.addElement(exp);
                            RESULT = exprs;
                         :}
                       | /* epsilon */
                         {:
                            RESULT = new ExpList();
                         :}
                       ;

identifier           ::= IDENTIFIER:id
                         {:
                            RESULT = new Identifier((String)(id.value)); 
                            parser.location.put(RESULT, id);
                         :}
                       ;

integer              ::= INTEGER:i
                         {:
                            RESULT = (Integer)(i.value);
                            parser.location.put(RESULT, i);
                         :}
                       | PLUS INTEGER:i
                         {:
                            RESULT = (Integer)(i.value);
                            parser.location.put(RESULT, i);
                         :}
                       | MINUS INTEGER:i
                         {:
                            RESULT = new Integer(-((Integer)(i.value)).intValue());
                            parser.location.put(RESULT, i);
                         :}
                       ;
